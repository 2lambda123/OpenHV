#region Copyright & License Information
/*
 * Copyright 2021-2023 The OpenHV Developers (see CREDITS)
 * This file is part of OpenHV, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version. For more
 * information, see COPYING.
 */
#endregion

using OpenRA.GameRules;
using OpenRA.Mods.Common.Effects;
using OpenRA.Mods.Common.Traits;
using OpenRA.Mods.HV.Effects;
using OpenRA.Traits;

namespace OpenRA.Mods.HV.Traits
{
	public class RailgunPowerInfo : SupportPowerInfo, IRulesetLoaded
	{
		[Desc("Range of cells the camera should reveal around target cell.")]
		public readonly WDist CameraRange = WDist.Zero;

		[Desc("Can the camera reveal shroud generated by the GeneratesShroud trait?")]
		public readonly bool RevealGeneratedShroud = true;

		[Desc("Reveal cells to players with these relationships only.")]
		public readonly PlayerRelationship CameraRelationships = PlayerRelationship.Ally;

		[Desc("Amount of time before detonation to spawn the camera.")]
		public readonly int CameraSpawnAdvance = 25;

		[Desc("Amount of time after detonation to remove the camera.")]
		public readonly int CameraRemoveDelay = 25;

		[Desc("Effect sequence sprite image")]
		public readonly string Effect = "railgun";

		[SequenceReference(nameof(Effect))]
		[Desc("Effect sequence to display")]
		public readonly string EffectSequence = "idle";

		[PaletteReference]
		public readonly string EffectPalette = "effect";

		[WeaponReference]
		[Desc("Which weapon to fire")]
		public readonly string Weapon = "RailgunStrike";

		public WeaponInfo WeaponInfo { get; private set; }

		[Desc("Apply the weapon impact this many ticks into the effect")]
		public readonly int WeaponDelay = 7;

		public override object Create(ActorInitializer init) { return new RailgunPower(init.Self, this); }
		public override void RulesetLoaded(Ruleset rules, ActorInfo ai)
		{
			var weaponToLower = (Weapon ?? string.Empty).ToLowerInvariant();
			if (!rules.Weapons.TryGetValue(weaponToLower, out var weapon))
				throw new YamlException($"Weapons Ruleset does not contain an entry '{weaponToLower}'");

			WeaponInfo = weapon;

			base.RulesetLoaded(rules, ai);
		}
	}

	public class RailgunPower : SupportPower
	{
		readonly RailgunPowerInfo info;

		public RailgunPower(Actor self, RailgunPowerInfo info)
			: base(self, info)
		{
			this.info = info;
		}

		public override void Activate(Actor self, Order order, SupportPowerManager manager)
		{
			base.Activate(self, order, manager);

			Activate(self, order.Target);
		}

		public void Activate(Actor self, Target target)
		{
			self.World.AddFrameEndTask(w =>
			{
				PlayLaunchSounds();

				w.Add(new Railgun(self.Owner, info.WeaponInfo, w, self.CenterPosition, target,
					info.Effect, info.EffectSequence, info.EffectPalette, info.WeaponDelay));

				if (info.CameraRange != WDist.Zero)
				{
					var type = info.RevealGeneratedShroud ? Shroud.SourceType.Visibility
						: Shroud.SourceType.PassiveVisibility;

					w.Add(new RevealShroudEffect(target.CenterPosition, info.CameraRange, type, self.Owner,
						info.CameraRelationships, info.CameraSpawnAdvance, info.CameraSpawnAdvance + info.CameraRemoveDelay));
				}
			});
		}
	}
}
